{"version":3,"sources":["Components/Validate.js","Components/Dataform.js","Components/ShowData.js","Components/Form.js","App.js","index.js"],"names":["Validate","values","errors","name","trim","specialCharacter","email","arr","split","length","pop","str","join","console","log","match","i","addresses","gender","validator","isDate","DOB","Date","getYear","getMonth","getDate","Dataform","handleSubmitForm","data","useState","setValues","dataiscorrect","setDataIsCorrect","setError","handleChange","e","target","value","useEffect","event","Object","keys","alert","className","onSubmit","preventDefault","placeholder","type","onChange","checked","ShowData","class","Array","isArray","map","element","Form","setData","showRecord","setshowRecord","buttonLable","newData","push","id","onClick","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.b928dd1c.chunk.js","sourcesContent":["\r\n// import { scryRenderedComponentsWithType } from 'react-dom/test-utils';\r\nimport validator from 'validator';\r\nconst Validate = (values) => {\r\n    \r\n    let errors = {};\r\n    values.name = values.name.trim();\r\n    if (!values.name) {\r\n        errors.name = \"Name is required.\"\r\n    }\r\n   // const domain = [\"com\", \"net\", \"org\"];\r\n   // const topdomain = [\"gmail\", \"google\", \"yahoo\"];\r\n\r\n    const specialCharacter = /^[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]*$/;\r\n    values.email = values.email.trim();\r\n    if (!values.email) {\r\n        errors.email = \"email is required.\"\r\n    }\r\n    // } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\r\n    //     errors.email = \"Email is invalid.\"\r\n    // } else if (values.email.indexOf(\"@\") <= 0) {\r\n    //     errors.email = \"invalid @ position.\"\r\n    // } else if (values.email.charAt(values.email.length - 4) !== \".\" && values.email.charAt(values.email.length - 3) !== \".\") {\r\n    //     errors.email = \"Invalid Email.\"\r\n    // }\r\n    let arr = values.email.split(\".\");\r\n   // const flag = domain.some(value => value === arr[arr.length - 1])\r\n    if ( arr.length <= 1) {\r\n        errors.email = \"Invalid Email.\"\r\n    }\r\n    arr.pop();\r\n    let str=arr.join(\".\");\r\n    arr=str.split(\"@\");\r\n    if (arr.length <= 1) {\r\n           errors.email = \"Invalid Email.\"\r\n       }\r\n       arr.pop();\r\n       str=arr.join(\"@\");\r\n       console.log(str);\r\n    // console.log(arr);\r\n//      let copy = [...arr];\r\n//     if(copy.length!=0)\r\n//     {\r\n//     copy = copy[copy.length - 1].split(\"@\");\r\n//     // console.log(copy);\r\n//    // const flag1 = topdomain.some(value => value === copy[copy.length - 1])\r\n//     if (copy.length <= 1) {\r\n//         errors.email = \"Invalid Email.\"\r\n//     }\r\n// }\r\n//     arr = arr.join(\"\").split(\"@\");\r\n//     // console.log(arr);\r\n//     arr.pop();\r\n//     // console.log(arr);\r\n//     for (let i = 0; i < arr.length; i++) {\r\n//         if (arr[i] === \"\")\r\n//             arr[i] = \"@\";\r\n//     }\r\n//     const str = arr.join(\"\").trim();\r\n    // console.log(str);\r\n    str=str.trim();\r\n    if(str.length==0)\r\n    {\r\n        errors.email = \"Invalid Email.\"\r\n    }\r\n\r\n    if (str.length !== 0) {\r\n        if (str[0].match(specialCharacter) || str[str.length - 1].match(specialCharacter)) {\r\n            errors.email = \"Invalid Email.\"\r\n        }\r\n        for (let i = 0; i < str.length - 1; i++) {\r\n            if (str[i].match(specialCharacter) && str[i + 1].match(specialCharacter)) {\r\n                errors.email = \"Invalid Email.\"\r\n            }\r\n        }\r\n    }\r\n    if (!values.addresses) {\r\n        errors.addresses = \"address is required.\"\r\n    } else if (values.addresses.length < 4) {\r\n        errors.addresses = \"addresses is to small.\"\r\n    }\r\n\r\n    if (!values.gender) {\r\n        errors.gender = \"Gender is required.\"\r\n    }\r\n\r\n\r\n    if (!validator.isDate(values.DOB)) {\r\n        errors.DOB = \"Enter Valid Date.\"\r\n    }\r\n    else if (+values.DOB.split(\"/\")[0] <= new Date().getYear() + 1900) {\r\n        if (+values.DOB.split(\"/\")[0] === new Date().getYear() + 1900) {\r\n            if (+values.DOB.split(\"/\")[1] <= new Date().getMonth()+1) {\r\n                if (+values.DOB.split(\"/\")[1] === new Date().getMonth()+1) {\r\n                    if (+values.DOB.split(\"/\")[2] > new Date().getDate()) {\r\n                        errors.DOB = \"Enter Valid Date.\"\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                errors.DOB = \"Enter Valid Date.\"\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        errors.DOB = \"Enter Valid Date.\"\r\n    }\r\n\r\n\r\n\r\n\r\n    return errors;\r\n}\r\n\r\nexport default Validate;\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Validate from \"./Validate\";\r\n// import validator from 'validator';\r\nimport \"./FormStyle.css\"\r\n\r\nconst Dataform = ({ handleSubmitForm, data }) => {\r\n    const [values, setValues] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        addresses: \"\",\r\n        DOB: \"\",\r\n        gender: \"\",\r\n\r\n\r\n    });\r\n\r\n    const [records, setRecords] = useState([])\r\n    const [dataiscorrect, setDataIsCorrect] = useState(false)\r\n\r\n    const [errors, setError] = useState({})\r\n\r\n    const handleChange = (e) => {\r\n        setValues({...values, [e.target.name]: e.target.value});\r\n    }\r\n\r\n\r\n    const submit = (e) => {\r\n        e.preventDefault()\r\n        setError(Validate(values));\r\n        setDataIsCorrect(true);\r\n\r\n        // const newRecord = { ...values, id: new Date().getTime().toString() }\r\n        // setRecords([...records, newRecord])\r\n        // console.log(records)\r\n        // setValues({name:\"\",email:\"\",addresses:\"\"})\r\n    }\r\n    useEffect((event) => {\r\n        if (Object.keys(errors).length === 0 && dataiscorrect) {\r\n            handleSubmitForm(values);\r\n            setValues({name:\"\",email:\"\",addresses:\"\",DOB:\"\",gender:\"\"})\r\n            alert(\"Form submit\")\r\n        }\r\n    }, [errors]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"center\">\r\n                <h1>Form</h1>\r\n                <form onSubmit={submit}>\r\n\r\n\r\n                    <div className=\"txt-field\">\r\n                        <input placeholder=\"Name\" type=\"text\" name=\"name\" value={values.name} onChange={handleChange}></input>\r\n                        {errors.name && <span>{errors.name}</span>}\r\n                    </div>\r\n\r\n\r\n                    <div className=\"txt-field\">\r\n                        <input placeholder=\"Email\" type=\"text\" name=\"email\" value={values.email} onChange={handleChange}></input>\r\n                        {errors.email && <span>{errors.email}</span>}\r\n                    </div>\r\n\r\n                    <div className=\"txt-field\">\r\n                        <input placeholder=\"Address\" type=\"text\" name=\"addresses\" value={values.addresses} onChange={handleChange}></input>\r\n                        {errors.addresses && <span>{errors.addresses}</span>}\r\n\r\n                    </div>\r\n\r\n                    <div className=\"txt-field\">\r\n                        <input placeholder=\"YYYY/MM/DD\" type=\"text\" name=\"DOB\" value={values.DOB} onChange={handleChange}></input>\r\n                        {errors.DOB && <span>{errors.DOB}</span>}\r\n\r\n                    </div>\r\n\r\n\r\n                    <div>\r\n                        <input type=\"radio\" checked={values.gender === \"Male\"} value=\"Male\" name=\"gender\" onChange={handleChange} /> Male\r\n                        <input type=\"radio\" checked={values.gender === \"Female\"} value=\"Female\" name=\"gender\" onChange={handleChange} /> Female\r\n                        <br></br>\r\n                        {errors.gender && <span>{errors.gender}</span>}\r\n                    </div>\r\n\r\n\r\n                    <input type=\"submit\" value=\"Submit\" ></input>\r\n\r\n\r\n                </form>\r\n\r\n            </div>\r\n            {/* <div>\r\n                    {\r\n                        records.map((element)=>{\r\n                            return(\r\n                                <div>\r\n                                    <p>{element.name}</p>\r\n                                    <p>{element.email}</p>\r\n                                    <p>{element.addresses}</p>\r\n                                    <p>{element.gender}</p>\r\n                                </div>\r\n\r\n                            )\r\n                        })\r\n                    }\r\n                </div> */}\r\n        </>\r\n    )\r\n}\r\nexport default Dataform;","import React from \"react\";\r\n\r\nconst ShowData = ({ data }) => {\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <table class=\"ui selectable inverted table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Address</th>\r\n                            <th>DOB</th>\r\n                            <th>Gender</th>\r\n\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    {Array.isArray(data) && data.map((element) => {\r\n                        return (\r\n\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>{element.name}</td>\r\n                                    <td>{element.email}</td>\r\n                                    <td>{element.addresses}</td>\r\n                                    <td>{element.DOB}</td>\r\n                                    <td>{element.gender}</td>\r\n                                </tr>\r\n                            </tbody>\r\n\r\n                        )\r\n                    })}\r\n\r\n                </table>\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default ShowData;","import React ,{useState} from 'react';\r\nimport Dataform from \"./Dataform\";\r\n// import Success from \"./Success\";\r\nimport ShowData from './ShowData';\r\n\r\nconst Form = () => {\r\n    const [data, setData] = useState([]);\r\n    const handleSubmitForm = (values)=>{\r\n        const newData = [...data];\r\n        newData.push(values);\r\n\r\n        setData([...newData]);\r\n        console.log(\"data = \" + data);\r\n    }\r\n    const [showRecord, setshowRecord] = useState(false);\r\n\r\n    const handleShowRecord = (event) => {\r\n        setshowRecord(!showRecord);\r\n    }\r\n    const buttonLable = !showRecord ? \"Show Record\":\"Back to Form\"\r\n    return (\r\n        <div>\r\n            {!showRecord && <Dataform handleSubmitForm={handleSubmitForm} data={data} />}\r\n            {<button className=\"bttn\" id='showRecord' type=\"button\" onClick={handleShowRecord}>{buttonLable}</button>}\r\n            {showRecord && <ShowData data={data}></ShowData>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport Form from \"./Components/Form\";\r\n// import ShowData from \"./Components/ShowData\"\r\n\r\nconst App = () => {\r\n    return (\r\n        <div>\r\n                <Form />\r\n        </div>\r\n    )\r\n}\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App></App>,document.querySelector(\"#root\"));"],"sourceRoot":""}